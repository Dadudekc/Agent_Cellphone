#!/usr/bin/env python3
"""
Demo Collaborative Tasks - Test the new collaborative task system

This script demonstrates the collaborative task management system that handles
the new collaborative tasks generated by the FSM system.
"""

import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent / "src"))

from collaborative_tasks import CollaborativeOrchestrator
from collaborative_tasks import CollaborativeTaskType, CollaborativeTaskState

def main():
    """Main demo function"""
    print("üöÄ Collaborative Tasks Demo Starting...")
    
    # Initialize the collaborative orchestrator
    base_path = Path("runtime/collaborative_tasks")
    orchestrator = CollaborativeOrchestrator(base_path)
    
    print(f"‚úÖ Collaborative Orchestrator initialized at: {base_path}")
    
    # Get collaboration status
    status = orchestrator.get_collaboration_status()
    print(f"\nüìä Collaboration Status:")
    print(f"   Total Tasks: {status['total_collaborative_tasks']}")
    print(f"   Active Agents: {', '.join(status['active_agents'])}")
    print(f"   Current Round: {status['collaboration_round']}")
    
    # Get active tasks
    active_tasks = orchestrator.get_active_collaborative_tasks()
    print(f"\nüìã Active Collaborative Tasks:")
    for task in active_tasks:
        print(f"   üîπ {task.title}")
        print(f"      Type: {task.task_type.value}")
        print(f"      State: {task.state.value}")
        print(f"      Agents: {', '.join(task.assigned_agents)}")
        print()
    
    # Simulate agent contributions
    print("ü§ù Simulating Agent Contributions...")
    
    # Agent-1 contribution to first task
    if active_tasks:
        first_task = active_tasks[0]
        orchestrator.add_agent_contribution(
            task_id=first_task.id,
            agent_id="Agent-1",
            contribution_type="planning",
            content="""Strategic planning for collaborative decision-making algorithms:
            
            1. Establish coordination framework for all agents
            2. Define decision-making protocols and workflows
            3. Set up communication channels and feedback loops
            4. Create progress tracking and milestone system
            
            This will serve as the foundation for all collaborative efforts."""
        )
        print(f"   ‚úÖ Agent-1 contributed planning to: {first_task.title}")
    
    # Agent-2 contribution
    if active_tasks:
        orchestrator.add_agent_contribution(
            task_id=first_task.id,
            agent_id="Agent-2",
            contribution_type="planning",
            content="""Task breakdown and resource allocation plan:
            
            1. Break down decision-making algorithms into manageable components
            2. Allocate computational resources and processing time
            3. Establish parallel work streams for different algorithm aspects
            4. Create resource monitoring and optimization systems
            
            This ensures efficient use of all agent capabilities."""
        )
        print(f"   ‚úÖ Agent-2 contributed planning to: {first_task.title}")
    
    # Agent-3 contribution
    if active_tasks:
        orchestrator.add_agent_contribution(
            task_id=first_task.id,
            agent_id="Agent-3",
            contribution_type="planning",
            content="""Technical implementation strategy:
            
            1. Design algorithm architecture and data structures
            2. Implement core decision-making logic
            3. Create testing and validation frameworks
            4. Establish performance monitoring and optimization
            
            This provides the technical foundation for collaborative algorithms."""
        )
        print(f"   ‚úÖ Agent-3 contributed planning to: {first_task.title}")
    
    # Agent-4 contribution
    if active_tasks:
        orchestrator.add_agent_contribution(
            task_id=first_task.id,
            agent_id="Agent-4",
            contribution_type="planning",
            content="""Communication protocols and security framework:
            
            1. Establish secure communication channels between agents
            2. Implement authentication and authorization protocols
            3. Create audit trails and compliance monitoring
            4. Set up data privacy and protection measures
            
            This ensures secure and reliable collaboration."""
        )
        print(f"   ‚úÖ Agent-4 contributed planning to: {first_task.title}")
    
    # Agent-5 contribution
    if active_tasks:
        orchestrator.add_agent_contribution(
            task_id=first_task.id,
            agent_id="Agent-5",
            contribution_type="planning",
            content="""Overall coordination and verification plan:
            
            1. Monitor progress across all collaboration streams
            2. Coordinate handoffs and dependencies between agents
            3. Verify quality and completeness of deliverables
            4. Facilitate continuous improvement and iteration
            
            This ensures successful completion of collaborative objectives."""
        )
        print(f"   ‚úÖ Agent-5 contributed planning to: {first_task.title}")
    
    # Advance to next round
    if active_tasks:
        orchestrator.start_collaboration_round(first_task.id)
        print(f"\nüîÑ Advanced {first_task.title} to next collaboration round")
    
    # Generate and display collaboration report
    print("\nüìä Generating Collaboration Report...")
    report = orchestrator.generate_collaboration_report()
    print(report)
    
    # Save report
    report_path = orchestrator.save_collaboration_report()
    print(f"\nüíæ Collaboration report saved to: {report_path}")
    
    print("\nüéâ Collaborative Tasks Demo Completed!")
    print("All agents are now working together on collaborative tasks!")

if __name__ == "__main__":
    main()
